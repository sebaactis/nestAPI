generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  username String
  password String

  userTypeId Int
  userType   UserType @relation(fields: [userTypeId], references: [id])

  walletId Int    @unique
  wallet   Wallet @relation(fields: [walletId], references: [id])

  contact Contact[]

  createdAt DateTime
  updatedAt DateTime
}

model UserType {
  id          Int    @id @default(autoincrement())
  description String

  User User[]

  createdAt DateTime
  updatedAt DateTime
}

model Wallet {
  id         Int      @id @default(autoincrement())
  user       User?
  currencyId Int
  currency   Currency @relation(fields: [currencyId], references: [id])
  balance    Decimal

  contact Contact[]

  createdAt DateTime
  updatedAt DateTime

  TransferTo   Transfer[] @relation("WalletTo")
  TransferFrom Transfer[] @relation("WalletFrom")

  Transaction Transaction[]
}

model Currency {
  id   Int    @id @default(autoincrement())
  name String
  description String

  wallet   Wallet[]
  transfer Transfer[]

  createdAt DateTime
  updatedAt DateTime

  Transaction Transaction[]
}

model Contact {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  walletId Int
  wallet   Wallet @relation(fields: [walletId], references: [id])

  userAlias String

  createdAt DateTime
  updatedAt DateTime
}

model Transfer {
  id Int @id @default(autoincrement())

  walletFromId Int
  walletFrom   Wallet @relation("WalletFrom", fields: [walletFromId], references: [id])

  walletToId Int
  walletTo   Wallet @relation("WalletTo", fields: [walletToId], references: [id])

  amount Decimal

  currencyId Int
  currency   Currency @relation(fields: [currencyId], references: [id])

  statusId Int
  status   Status @relation(fields: [statusId], references: [id])

  createdAt DateTime
  updatedAt DateTime
}

model Status {
  id          Int    @id @default(autoincrement())
  description String

  transfer    Transfer[]
  transaction Transaction[]

  createdAt DateTime
  updatedAt DateTime
}

model Transaction {
  id Int @id @default(autoincrement())

  walletId Int
  wallet   Wallet @relation(fields: [walletId], references: [id])

  type String

  currencyId Int
  currency   Currency @relation(fields: [currencyId], references: [id])

  amount      Decimal
  description String

  statusId Int
  status   Status @relation(fields: [statusId], references: [id])

  createdAt DateTime
  updatedAt DateTime
}
